<h1>Admin Dashboard</h1>
<p>Welcome back, Admin!</p>
<main>
    <section class="metrics">
        <div class="metric">
            <h2>Total Sales Today</h2>
            <p id="totalSales">$0</p>
        </div>
        <div class="metric">
            <h2>Total Orders Today</h2>
            <p id="totalOrders">0</p>
        </div>
        <div class="metric">
            <h2>New Users Today</h2>
            <p id="newUsers">0</p>
        </div>
        <div class="metric">
            <h2>Pending Orders</h2>
            <p id="pendingOrders">0</p>
        </div>
    </section>

    <section class="charts">
        <div class="chart-container">
            <h2>Sales Trend</h2>
            <canvas id="salesTrendChart"></canvas>
        </div>
        <div class="chart-container">
            <h2>Order Volume</h2>
            <canvas id="orderVolumeChart"></canvas>
        </div>
        <div class="chart-container">
            <h2>Product Performance</h2>
            <canvas id="productPerformanceChart"></canvas>
        </div>
    </section>

    <section class="recent-activity">
        <h2>Recent Orders</h2>
        <ul id="recentOrders">
            <!-- Recent orders will be dynamically inserted here -->
        </ul>
        <h2>Recent User Registrations</h2>
        <ul id="recentRegistrations">
            <!-- Recent user registrations will be dynamically inserted here -->
        </ul>
    </section>

    <section class="quick-actions">
        <h2>Quick Actions</h2>
        <ul>
            <li><a href="/admin/orders">Manage Orders</a></li>
            <li><a href="/admin/users">Manage Users</a></li>
            <li><a href="/admin/reports">View Reports</a></li>
            <li><a href="/admin/add-book" class="btn btn-primary">Add Book</a></li>
        </ul>
    </section>
</main>

<footer class="footer">
    <!-- Footer content here -->
</footer>

<script>
    // Initialize Sales Trend Chart
    const ctxSalesTrend = document.getElementById('salesTrendChart').getContext('2d');
    const salesTrendChart = new Chart(ctxSalesTrend, {
        type: 'line',
        data: {
            labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
            datasets: [{
                label: 'Sales',
                data: [1200, 1500, 1800, 1300, 1600, 1900, 2000],
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Initialize other charts similarly
    // const ctxOrderVolume = document.getElementById('orderVolumeChart').getContext('2d');
    // const orderVolumeChart = new Chart(ctxOrderVolume, { /* Chart config */ });

    // const ctxProductPerformance = document.getElementById('productPerformanceChart').getContext('2d');
    // const productPerformanceChart = new Chart(ctxProductPerformance, { /* Chart config */ });

    // Fetch and update metrics and charts dynamically
    async function fetchData() {
        try {
            const response = await fetch('/api/dashboard-data');
            const data = await response.json();
            
            // Update metrics
            document.getElementById('totalSales').innerText = `$${data.totalSales}`;
            document.getElementById('totalOrders').innerText = data.totalOrders;
            document.getElementById('newUsers').innerText = data.newUsers;
            document.getElementById('pendingOrders').innerText = data.pendingOrders;

            // Update charts with fetched data
            salesTrendChart.data.datasets[0].data = data.salesTrend;
            salesTrendChart.update();

            // Similarly update orderVolumeChart and productPerformanceChart
            // orderVolumeChart.data.datasets[0].data = data.orderVolume;
            // orderVolumeChart.update();
            
            // productPerformanceChart.data.datasets[0].data = data.productPerformance;
            // productPerformanceChart.update();
            
        } catch (error) {
            console.error('Error fetching dashboard data:', error);
        }
    }

    document.addEventListener('DOMContentLoaded', fetchData);
</script>
<!-- <script>
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    async function fetchProtectedData() {
        let token = getCookie('adminToken'); // Retrieve token from cookies
        console.log('Token from cookies:', token);

        if (!token) {
            alert('No token found. Please log in again.');
            window.location.href = '/admin-login';
            return;
        }

        // Decode the token to check expiration
        const payload = JSON.parse(atob(token.split('.')[1]));
        const now = Math.floor(Date.now() / 1000);
        
        if (payload.exp < now) {
            // Token expired, attempt to refresh
            const refreshResponse = await fetch('/refresh-token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ token })
            });

            if (refreshResponse.ok) {
                const result = await refreshResponse.json();
                token = result.token;
                document.cookie = `adminToken=${token}; path=/`; // Update cookie with new token
                // Retry the original request with the new token
                return fetchProtectedData();
            } else {
                alert('Session expired. Please log in again.');
                window.location.href = '/admin-login';
                return;
            }
        }

        try {
            const response = await fetch('/admin-dashboard', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                const text = await response.text();
                console.error('Error response:', text);
                alert('Error fetching protected data: ' + text);
                return;
            }

            const result = await response.json();
            console.log('Protected data:', result);
            document.getElementById('protectedData').innerText = JSON.stringify(result, null, 2);
        } catch (error) {
            console.error('Error:', error);
            alert('There was an error fetching protected data.');
        }
    }

    document.addEventListener('DOMContentLoaded', fetchProtectedData);
</script> -->